<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin User Management</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css">
</head>
<body>
    <div class="container mt-5">
        <h1>User Admin</h1>
        <form id="userForm">
            <!-- Form fields for user input -->
            <div class="mb-3">
                <label for="firstName" class="form-label">First Name</label>
                <input type="text" class="form-control" id="firstName" required>
            </div>
            <div class="mb-3">
                <label for="lastName" class="form-label">Last Name</label>
                <input type="text" class="form-control" id="lastName" required>
            </div>
            <div class="mb-3">
                <label for="country" class="form-label">Country</label>
                <input type="text" class="form-control" id="country" required>
            </div>
            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <input type="email" class="form-control" id="email" required>
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <input type="password" class="form-control" id="password" required>
            </div>
            <div class="mb-3">
                <label for="role" class="form-label">Role</label>
                <select class="form-control" id="role">
                    <option value="Traveler">Traveler</option>
                    <option value="Guide">Guide</option>
                </select>
            </div>
            <button type="submit" class="btn btn-primary" id="submitButton">Add User</button>
            <button type="submit" class="btn btn-success" id="updateButton" style="display: none;">Update User</button>

        </form>

        <button class="btn btn-danger mt-3" onclick="deleteAllUsers()">Delete All Users</button>

        <h2 class="mt-5">Existing Users</h2>
        <table class="table table-striped mt-3">
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Country</th>
                    <th>Email</th>
                    <th>Password</th>
                    <th>Role</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="userList"></tbody>
        </table>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.1/axios.min.js"></script>
    <script>
        let editingUserId = null;

        async function fetchUsers() {
            const response = await axios.get('http://localhost:3000/user');
            const users = response.data;
            const userList = document.getElementById('userList');
            userList.innerHTML = '';

            users.forEach(user => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${user.firstName}</td>
                    <td>${user.lastName}</td>
                    <td>${user.country}</td>
                    <td>${user.email}</td>
                    <td>${user.password}</td>
                    <td>${user.role}</td>
                    <td>
                        <button class="btn btn-warning btn-sm" onclick="editUser('${user._id}', '${user.firstName}', '${user.lastName}', '${user.country}', '${user.email}', '${user.role}')">Edit</button>
                        <button class="btn btn-danger btn-sm" onclick="deleteUser('${user._id}')">Delete</button>
                    </td>
                `;
                userList.appendChild(row);
            });
        }

        document.getElementById('userForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const newUser = {
                firstName: document.getElementById('firstName').value,
                lastName: document.getElementById('lastName').value,
                country: document.getElementById('country').value,
                email: document.getElementById('email').value,
                password: document.getElementById('password').value,
                role: document.getElementById('role').value
            };

            try {
                if (editingUserId) {
                    await axios.put(`http://localhost:3000/user/update/${editingUserId}`, newUser);
                } else {
                    await axios.post('http://localhost:3000/user/create', newUser);
                }
                fetchUsers();
                e.target.reset();
                editingUserId = null;
                toggleButtonVisibility(); // Reset button visibility

            } catch (error) {
                console.error('Error adding/updating user:', error);
                alert('Error adding/updating user: ' + (error.response?.data?.message || error.message));
            }
        });

        async function editUser(id, firstName, lastName, country, email, role) {
            editingUserId = id;
            document.getElementById('firstName').value = firstName;
            document.getElementById('lastName').value = lastName;
            document.getElementById('country').value = country;
            document.getElementById('email').value = email;
            document.getElementById('role').value = role;

             // Toggle button visibility
             toggleButtonVisibility();
        }

        function toggleButtonVisibility() {
            const submitButton = document.getElementById('submitButton');
            const updateButton = document.getElementById('updateButton');

            if (editingUserId ) {
                submitButton.style.display = 'none';
                updateButton.style.display = 'inline-block';
            } else {
                submitButton.style.display = 'inline-block';
                updateButton.style.display = 'none';
            }
        }


        async function deleteUser(id) {
            try {
                await axios.delete(`http://localhost:3000/user/delete/${id}`);
                fetchUsers();
            } catch (error) {
                console.error('Error deleting user:', error);
                alert('Error deleting user: ' + (error.response?.data?.message || error.message));
            }
        }

        async function deleteAllUsers() {
            try {
                await axios.delete('http://localhost:3000/user/deleteAll');
                fetchUsers();
            } catch (error) {
                console.error('Error deleting all users:', error);
                alert('Error deleting all users: ' + (error.response?.data?.message || error.message));
            }
        }

        fetchUsers();
    </script>
</body>
</html>
